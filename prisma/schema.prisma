generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    firstName  String?
    lastName   String?
    email      String?      @unique
    password   String?
    role       UserRole     @default(USER)
    isVerified Boolean?     @default(false)
    //   isSubscribed Boolean?     @default(false)
    isTos      Boolean?     @default(false)
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    user       UserAccount?
}

model UserAccount {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    userId          String        @unique @db.ObjectId
    user            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    settings        Settings?
    businessDetails BusinessInfo?
    preferences     Preferences?
    subscription    Subscription?
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    email      String   @unique
    code       String
    expiryTime DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model BusinessInfo {
    id           String       @id @default(auto()) @map("_id") @db.ObjectId
    accountId    String       @unique @db.ObjectId
    account      UserAccount? @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    businessName String?
    description  String?
    county       String?
    region       String?
    industry     String?
    role         String?
    teamSize     String?
    phone        String?
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
}

model Preferences {
    id        String       @id @default(auto()) @map("_id") @db.ObjectId
    accountId String       @unique @db.ObjectId
    account   UserAccount? @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    channel   String?
    goal      String?
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

model Subscription {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    accountId     String       @unique @db.ObjectId
    account       UserAccount? @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    plan          String?
    paymentMethod String?
    isAnnual      Boolean?
    isPaid        Boolean?
    amount        Int?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model Settings {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    accountId       String           @unique @db.ObjectId
    account         UserAccount?     @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    emailAccounts   EmailAccount[]
    twitterAccounts TwitterAccount[]
}

model EmailAccount {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    name       String?
    apiKey     String?
    settingsId String    @unique @db.ObjectId
    settings   Settings? @relation(fields: [settingsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

model TwitterAccount {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    username     String?   @unique
    clientId     String?
    clientSecret String?
    bearerToken  String?
    settingsId   String    @unique @db.ObjectId
    settings     Settings? @relation(fields: [settingsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    token        Token?
}

model Token {
    id               String          @id @default(auto()) @map("_id") @db.ObjectId
    twitterAccount   TwitterAccount? @relation(fields: [twitterAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    twitterAccountId String?         @unique @db.ObjectId
    accessToken      String?
    refreshToken     String?         @unique
    codeVerifier     String?
    state            String?
    callbackUrl      String?
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
}
